#adding hot deck and missfroset to test.R but the code is from chat gpt
# Load required libraries
library(missMethods)
library(SimCorrMix)
library(vcd)
library(dplyr)
library(VIM)         # for random hot-deck

#–– 1. Define simulation parameters ––
reps              <- 100
#n_values         <- c(100, 500)
n_values          <- c(100)
#m_values         <- c(6, 30)
m_values         <- c(6)
rho_vals         <- c(0.1, 0.4, 0.7)
p_vals           <- seq(0.1, 0.5, 0.1)
#level_scenarios  <- c("few", "many")
level_scenarios  <- c("few")
#dist_scenarios   <- c("balanced", "unbalanced")
dist_scenarios   <- c("balanced")
simulation_count <- reps *
  length(n_values) *
  length(m_values) *
  length(rho_vals) *
  length(level_scenarios) *
  length(dist_scenarios)
start_time <- Sys.time()

#–– 2. Helpers ––

# 2a) mode function
get_mode <- function(x) {
  x <- x[!is.na(x)]
  if (length(x) == 0) return(NA)
  tbl <- table(x)
  names(tbl)[which.max(tbl)][1]
}

# 2b) mode-imputation
impute_mode <- function(df) {
  df_imp <- df
  for (j in seq_along(df_imp)) {
    m_j <- get_mode(df_imp[[j]])
    df_imp[[j]][is.na(df_imp[[j]])] <- m_j
  }
  df_imp
}

# 2c) random hot-deck imputation
impute_hotdeck <- function(df) {
  # draws each NA at random from all observed values of that column
  hotdeck(df, variable = names(df))
}

# 2d) count false imputations
count_false <- function(orig, deleted, imputed) {
  mask <- is.na(deleted)
  sum(imputed[mask] != orig[mask])
}

# 2e) build marginal CDF
make_marginal <- function(k, balanced = TRUE) {
  if (balanced) {
    probs <- rep(1/k, k)
  } else {
    probs <- c(rep(0.1, k-1), 1 - 0.1*(k-1))
  }
  cumsum(probs) - 1e-10
}

#–– 3. Prepare storage ––
simulation_summary <- data.frame(
  rep           = integer(),
  n             = integer(),
  m             = integer(),
  rho           = numeric(),
  p             = numeric(),
  levels        = character(),
  dist_form     = character(),
  mechanism     = character(),
  method        = character(),   # "Mode" or "HotDeck"
  false_count   = integer(),
  stringsAsFactors = FALSE
)

#–– 4. Main simulation ––
for (rep in seq_len(reps)) {
  set.seed(1233 + rep)
  for (n in n_values) for (m in m_values) {
    delete_cols <- seq(2, m, by = 2)
    for (levels_sce in level_scenarios) {
      levels_vec <- if (levels_sce == "few") sample(2:4, m, TRUE)
      else                sample(5:7, m, TRUE)
      for (dist_sce in dist_scenarios) {
        balanced_flag <- (dist_sce == "balanced")
        marginal_list <- mapply(make_marginal,
                                k        = levels_vec,
                                balanced = balanced_flag,
                                SIMPLIFY = FALSE)
        support_list <- lapply(levels_vec, seq_len)
        for (rho in rho_vals) {
          rho_mat <- matrix(rho, m, m); diag(rho_mat) <- 1
          sim <- corrvar2(
            k_cat    = m, k_cont = 0,
            marginal = marginal_list,
            support  = support_list,
            method   = "Polynomial",
            rho      = rho_mat,
            n        = n
          )
          complete_data <- as.data.frame(sim$Y_cat)
          complete_data[] <- lapply(complete_data, factor)
          
          # progress counter
          cat("Remaining complete‐data scenarios:", simulation_count, "\n")
          simulation_count <- simulation_count - 1
          
          for (p_miss in p_vals) {
            # 4a) introduce missingness
            df_list <- list(
              MCAR = delete_MCAR(complete_data, p = p_miss, cols_mis = delete_cols),
              MAR  = delete_MAR_1_to_x(complete_data, p = p_miss,
                                       cols_mis  = delete_cols,
                                       cols_ctrl = delete_cols - 1, x = 3),
              MNAR = delete_MNAR_1_to_x(complete_data, p = p_miss,
                                        cols_mis = delete_cols, x = 3)
            )
            
            # 4b) for each mechanism, impute both ways & count errors
            for (mech in names(df_list)) {
              deleted_df <- df_list[[mech]]
              
              # mode
              imp_mode <- impute_mode(deleted_df)
              f_mode   <- count_false(complete_data, deleted_df, imp_mode)
              
              # hot-deck
              imp_hd   <- impute_hotdeck(deleted_df)
              f_hd     <- count_false(complete_data, deleted_df, imp_hd)
              
              # record both
              simulation_summary <- bind_rows(
                simulation_summary,
                data.frame(
                  rep         = rep,   n       = n,    m      = m,
                  rho         = rho,   p       = p_miss,
                  levels      = levels_sce,
                  dist_form   = dist_sce,
                  mechanism   = mech,
                  method      = "Mode",
                  false_count = f_mode,
                  stringsAsFactors = FALSE
                ),
                data.frame(
                  rep         = rep,   n       = n,    m      = m,
                  rho         = rho,   p       = p_miss,
                  levels      = levels_sce,
                  dist_form   = dist_sce,
                  mechanism   = mech,
                  method      = "HotDeck",
                  false_count = f_hd,
                  stringsAsFactors = FALSE
                )
              )
            }
          }
        }
      }
    }
  }
}

#–– 5. Summarise per‐rep error‐rates ––
rep_summary <- simulation_summary %>%
  group_by(rep, n, m, rho, p, levels, dist_form, mechanism, method) %>%
  summarise(
    total_false = sum(false_count),
    error_rate  = total_false / (m * n),
    .groups     = "drop"
  )

#–– 6. Average across replicates, wide for the two methods ––
final_summary <- rep_summary %>%
  group_by(n, m, rho, p, levels, dist_form, mechanism) %>%
  summarise(
    mean_error_mode     = mean(error_rate[method == "Mode"]),
    mean_error_hotdeck  = mean(error_rate[method == "HotDeck"]),
    .groups             = "drop"
  )

#–– 7. Done ––
end_time <- Sys.time()
cat("Total run-time:", end_time - start_time, "\n")
print(final_summary)
untitled1 <- final_summary
